#Patch Script
SCRIPT_DIR=/oracle_software/scripts/shell
PATCH_DIR=$SCRIPT_DIR/patch
PATCH_INFO_FILE=${PATCH_DIR}/patch.info
DATETIME=`date +%Y%m%d`
DATE_DETAILED=`date +%Y_%m_%d_%M_%H`
HOST_NAME=`hostname -s`
LOG_DIR=/oracle_software/scripts/logs/patch/${HOST_NAME}
GREEN="\033[1;32;40m"
RED="\033[1;31;40m"
NORM="\033[0m"
ENDCOLOR="\e[0m"
OPTION=$1
GI_PATCH_DIR=$LOG_DIR/GI_APPLY
RDBMS_PATCH_DIR=$LOG_DIR/RDBMS_APPLY
DATAPATCH_DIR=$LOG_DIR/DATAPATCH
STATUS_DIR=$LOG_DIR/STATUS


function CREATE_LOG_DIRS_FUNC () {

# Create the log directories if they dont exist
if [[ ! -d "${GI_PATCH_DIR}" ]] || [[ ! -d "${RDBMS_PATCH_DIR}" ]] || [[ ! -d "${DATAPATCH_DIR}" ]] || [[ ! -d "${STATUS_DIR}" ]] 
then
  mkdir -p $GI_PATCH_DIR
  chmod -R 770 $GI_PATCH_DIR
  mkdir -p $RDBMS_PATCH_DIR
  chmod -R 770 $RDBMS_PATCH_DIR
  mkdir -p $DATAPATCH_DIR
  chmod -R 770 $DATAPATCH_DIR
  mkdir -p $STATUS_DIR
  chmod -R 770 $STATUS_DIR
fi



# Delete old main status log file
if [[ -f $STATUS_DIR/MAIN_STATUS_${OPTION}_${DATE_DETAILED}.log ]]
then
  rm $STATUS_DIR/MAIN_STATUS_${OPTION}_${DATE_DETAILED}.log
fi
}



function OPATCH_UPDATE () {

    PID_OF_ASM=`ps -ef|grep pmon|grep ASM |awk '{print $2}'`
    GRID_HOME=`sudo su -c "ls -l /proc/${PID_OF_ASM}/exe|sed 's/\/bin\/oracle$//'" grid|awk '{print $NF}'`


oracle@cmoordbsvrp3101 claimpr2 [/home/oracle]
$ unzip -qo /oracle_software/release_19.0.0.0/gi_ru/JAN2023/p6880880_190000_Linux-x86-64.zip -d /u01/app/oracle/product/19.0.0/db_1

oracle@cmoordbsvrp3101 claimpr2 [/home/oracle]
$ ls -ld /u01/app/oracle/product/19.0.0/db_1/OPatch
drwxr-x---. 15 oracle oinstall 4096 Apr 14 11:20 /u01/app/oracle/product/19.0.0/db_1/OPatch

oracle@cmoordbsvrp3101 claimpr2 [/home/oracle]
$


}

log_archive_config                   string      dg_config=(CLAIMU10FGDR2,claim
                                                 u10fg,claimu10fgfs)


function GI_PATCH () {

    PID_OF_ASM=`ps -ef|grep pmon|grep ASM |awk '{print $2}'`
    GRID_HOME=`sudo su -c "ls -l /proc/${PID_OF_ASM}/exe|sed 's/\/bin\/oracle$//'" grid|awk '{print $NF}'`
    IS_IT_HAS=`$GRID_HOME/bin/crsctl check has`

    if grep -q "Oracle High Availability Services is online" <<< "${IS_IT_HAS}"
    then
        CLUSTERWARE=has
    else
        CLUSTERWARE=crs
    fi


    $GRID_HOME/bin/srvctl config database -v| while read DB_UNQ_NAME ORACLE_HOME_PATH VERSION
    do
        unset ORACLE_HOME
        export ORACLE_HOME=$ORACLE_HOME_PATH
        if [[ $CLUSTERWARE == "crs" ]]
        then
            IS_INST_RUNNING_ON_SERVER=`$ORACLE_HOME/bin/srvctl status database -d ${DB_UNQ_NAME} -v |grep ${HOST_NAME}|grep -v grep|wc -l`
            if [[ $IS_INST_RUNNING_ON_SERVER -ne 0 ]]
            then
                NAME_OF_RUNNING_INSTANCE=`$ORACLE_HOME/bin/srvctl status database -d ${DB_UNQ_NAME} -v |grep ${HOST_NAME}|grep -v grep|awk '{print $2}'`
                $ORACLE_HOME/bin/srvctl stop instance -d ${DB_UNQ_NAME} -i $NAME_OF_RUNNING_INSTANCE -f &
            else
                continue
            fi
        else
            $ORACLE_HOME/bin/srvctl stop database -d ${DB_UNQ_NAME} &
        fi
    done




    COUNT_OF_PMON=`ps -ef|grep pmon|grep -v 'grep\|ASM'|wc -l`
    while [[ ${COUNT_OF_PMON} -gt 0 ]]
    do
        echo -e "${GREEN}WAITING FOR DB INSTANCES TO BE SHUTDOWN ON $HOST_NAME...SLEEPING 15 SECS ${ENDCOLOR}" | tee $GI_PATCH_DIR/GI_PATCH_STATUS_${OPTION}_${DATETIME}.log
        sleep 15
        COUNT_OF_PMON=`ps -ef|grep pmon|grep -v 'grep\|ASM'|wc -l`
    done

    echo -e "${GREEN}GI_PATCH_SHUTDOWN_DB_INSTANCE_STEP : ALL DB INSTANCES ARE SHUTDOWN ON ${HOST_NAME}${ENDCOLOR}" | tee $GI_PATCH_DIR/GI_PATCH_STATUS_${OPTION}_${DATETIME}.log
	echo -e "${GREEN}GI_PATCH_SHUTDOWN_DB_INSTANCE_STEP : ALL DB INSTANCES ARE SHUTDOWN ON ${HOST_NAME}${ENDCOLOR}" >> $STATUS_DIR/MAIN_STATUS_${OPTION}_${DATETIME}.log


    sudo $GRID_HOME/crs/install/root${CLUSTERWARE}.sh -prepatch > $GI_PATCH_DIR/GI_PREPATCH_SCRIPT_EXECUTION.log

    if grep -q "Successfully unlock" $GI_PATCH_DIR/GI_PREPATCH_SCRIPT_EXECUTION.log && grep -q "Pre-patch steps for patching GI home successfully completed" $GI_PATCH_DIR/GI_PREPATCH_SCRIPT_EXECUTION.log
    then 
        echo -e "${GREEN}GI_PATCH_ROOT_PREPATCH_SCRIPT_STEP : SUCCESS, GI PREPATCH ROOT SCRIPT SUCCESSFULLY EXECUTED ON ${HOST_NAME}${ENDCOLOR}" | tee $GI_PATCH_DIR/GI_PATCH_STATUS_${OPTION}_${DATETIME}.log
	    echo -e "${GREEN}GI_PATCH_ROOT_PREPATCH_SCRIPT_STEP : SUCCESS, GI PREPATCH ROOT SCRIPT SUCCESSFULLY EXECUTED ON ${HOST_NAME}${ENDCOLOR}" >> $STATUS_DIR/MAIN_STATUS_${OPTION}_${DATETIME}.log
    else 
        echo -e "${RED}GI_PATCH_ROOT_PREPATCH_SCRIPT_STEP : ERROR, GI PREPATCH ROOT SCRIPT FAILED ON, PLEASE CHECK LOGS ${HOST_NAME}${ENDCOLOR}" | tee $GI_PATCH_DIR/GI_PATCH_STATUS_${OPTION}_${DATETIME}.log
	    echo -e "${RED}GI_PATCH_ROOT_PREPATCH_SCRIPT_STEP : ERROR, GI PREPATCH ROOT SCRIPT FAILED ON, PLEASE CHECK LOGS ${HOST_NAME}${ENDCOLOR}" >> $STATUS_DIR/MAIN_STATUS_${OPTION}_${DATETIME}.log
        exit 1
    fi





}





